import os
from pathlib import Path
import textwrap
import click
from rich.console import Console

console = Console()


def _write(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")


def _scaffold_espidf(target_dir: Path, name: str):
    # Estructura mÃ­nima de un proyecto ESP-IDF
    _write(
        target_dir / "CMakeLists.txt",
        textwrap.dedent(
            f"""
            cmake_minimum_required(VERSION 3.16)
            include($ENV{{IDF_PATH}}/tools/cmake/project.cmake)
            project({name})
            """
        ).strip()
    )
    _write(
        target_dir / "main/CMakeLists.txt",
        'idf_component_register(SRCS "main.c" INCLUDE_DIRS ".")\n',
    )
    _write(
        target_dir / "main/main.c",
        textwrap.dedent(
            """
            #include "freertos/FreeRTOS.h"
            #include "freertos/task.h"
            #include "esp_system.h"
            #include "esp_log.h"

            static const char *TAG = "robot_angel";

            void app_main(void) {
                while (1) {
                    ESP_LOGI(TAG, "Hello from Robot Angel!");
                    vTaskDelay(pdMS_TO_TICKS(1000));
                }
            }
            """
        ).lstrip()
    )
    console.print(f"âœ… Proyecto ESP-IDF creado en: {target_dir}")


def _scaffold_ros2_py(target_dir: Path, name: str):
    pkg = f"{name}_pkg"
    pkg_dir = target_dir / pkg
    _write(
        target_dir / "README.md",
        f"# {name} (ROS 2)\n\nProyecto creado por Robot Angel CLI.\n",
    )
    # package.xml mÃ­nimo
    _write(
        pkg_dir / "package.xml",
        textwrap.dedent(
            f"""
            <?xml version="1.0"?>
            <package format="3">
              <name>{pkg}</name>
              <version>0.0.1</version>
              <description>Demo package generated by Robot Angel</description>
              <maintainer email="you@example.com">You</maintainer>
              <license>Apache-2.0</license>
              <buildtool_depend>ament_cmake</buildtool_depend>
              <exec_depend>rclpy</exec_depend>
              <exec_depend>std_msgs</exec_depend>
            </package>
            """
        ).strip()
    )
    # setup.py simple (puedes pasarte a pyproject luego)
    _write(
        pkg_dir / "setup.py",
        textwrap.dedent(
            f"""
            from setuptools import setup

            package_name = '{pkg}'

            setup(
                name=package_name,
                version='0.0.1',
                packages=[package_name],
                data_files=[
                    ('share/ament_index/resource_index/packages', ['resource/' + package_name]),
                    ('share/' + package_name, ['package.xml']),
                ],
                install_requires=['setuptools'],
                zip_safe=True,
                maintainer='you',
                maintainer_email='you@example.com',
                description='Demo ROS 2 Python package',
                license='Apache-2.0',
                tests_require=['pytest'],
                entry_points={{
                    'console_scripts': [
                        'talker = {pkg}.talker:main',
                    ],
                }},
            )
            """
        ).strip()
    )
    _write(pkg_dir / "resource" / pkg, "")
    _write(
        pkg_dir / pkg / "__init__.py",
        "",
    )
    _write(
        pkg_dir / pkg / "talker.py",
        textwrap.dedent(
            """
            import rclpy
            from rclpy.node import Node
            from std_msgs.msg import String

            class Talker(Node):
                def __init__(self):
                    super().__init__('talker')
                    self.pub = self.create_publisher(String, 'chatter', 10)
                    self.timer = self.create_timer(1.0, self.tick)
                    self.i = 0

                def tick(self):
                    msg = String()
                    msg.data = f'Hello from Robot Angel {self.i}'
                    self.pub.publish(msg)
                    self.get_logger().info(msg.data)
                    self.i += 1


            def main():
                rclpy.init()
                node = Talker()
                rclpy.spin(node)
                node.destroy_node()
                rclpy.shutdown()
            """
        ).lstrip()
    )
    console.print(f"âœ… Paquete ROS 2 (Python) creado en: {pkg_dir}")


@click.command(help="ðŸª„ Crea un nuevo proyecto robÃ³tico base")
@click.argument("name")
@click.option(
    "--type",
    "proj_type",
    type=click.Choice(["esp-idf", "ros2-py"]),
    default="esp-idf",
    show_default=True,
)
@click.option("--path", "dest", default=".", show_default=True, help="Directorio destino")
def init_project(name: str, proj_type: str, dest: str):
    target_dir = Path(dest).expanduser().resolve() / name
    if target_dir.exists() and any(target_dir.iterdir()):
        raise click.ClickException(f"El directorio {target_dir} ya existe y no estÃ¡ vacÃ­o.")
    if proj_type == "esp-idf":
        _scaffold_espidf(target_dir, name)
    elif proj_type == "ros2-py":
        _scaffold_ros2_py(target_dir, name)

    console.print("ðŸŽ‰ Proyecto inicializado. Â¡Listo para trabajar!")
